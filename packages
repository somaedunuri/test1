/usr/bin is provided by the operating system.  In this case, for linux, that means Red Hat.  Solaris /usr/bin comes from Sun (now Oracle).  You can expect no consistency between Solaris and Linux as to availability and features of tools in /usr/bin.  You can expect some consistency between different Solaris versions, and different Linux versions, as the OS providers may change tools versions, but are likely to support some backwards compatibility when they do.  The contents of /usr/bin are beyond our control.

/usr/cisco/bin is provided by Cisco.  I don't know who exactly; I think someone in IT.  Since this is Cisco provided, you can assume some consistency between Solaris and Linux.  However, because the vast majority of tools are unversioned, it isn't safe to assume that a tool there today will be the same tool 5 years from now.

/router/bin is provided by STEP.  /router/bin is mostly links into /sw/packages.  We guarantee consistency between Solaris and Linux for most tools.  Most tools in /router/bin are versioned.  For instance, we don't provide a gcc binary, but rather gcc-c3.4.5-p5 and gcc-c4.2.1-p4.  The idea here is that we need builds reproducible over an up to 10 year span, so the only way we can get that is by using specific tools versions in makefiles and build scripts and jam files.  A versioned tool will never change.  New versions are added over time, in addition to old versions.  Old versions sometimes disappear when a new OS can no longer build or run them.  It is expected that if you need the old version, then you will use the old OS.  Some machines running old OS versions are kept alive for this purpose, e.g. for PSIRT rebuilds of 10 year old IOS versions.

For production builds, ideally, you should be using versioned tools out of /router/bin whenever possible, as these are the only ones that are guaranteed to stay the same over the long term.  Cisco specific tools, like acme, can some from /usr/cisco/bin.  You should only be using tools from /usr/bin that are non-critical, simple, and unlikely to ever change, such as find and ls.

Note that /router/bin has never been supported for CEL 5.50.  Unfortunately, the fact that CEL 5.50 was made available more than two years before we added support for it has made things complicated, as some people have been relying on CEL 5.50 for builds when it never should have been used for builds in the first place.  This is a problem that we are now trying to fix, but unfortunately it won't be possible to fix it without causing some breakages.

Your builds are trying to use /router/bin/python, which is a mistake, and means that your builds are potentially non-reproducible.  Unfortunately, I don't know what you are building (IOS-XR maybe?) so I don't know who to contact about that.  Your builds should instead be using a versioned python, e.g. /router/bin/python-2.7.1, which is the currently recommended version.  Using a versioned python ensures that you will get the same results 10 years from now.  This may require fixes to your build scripts though.

On CEL 5.0x, /router/bin/python points at python-2.1.1.  According to wikipedia, python-2.1 was released April 7, 2001.  So that was over ten years ago.  We should not be using a 10 year old version of python to build new products.  We need to get people to stop using an old out-dated python version, and use modern versions that are easier to build and support.

There is unfortunately no good solution to this problem.  If we make the CEL 5.50 /router/bin/python link point at python-2.1.1, then people will continue to use an old outdated python version that is now unsupportable.  If we make the CEL 5.50 /router/bin/python link point at python-2.7.1, then some people's python code will probably fail mysteriously.  If we create no /router/bin/python link, to try to force people to use versioned tools, then some people will report the absence of /router/bin as a bug and insist that it be fixed.  So no matter what we do, there will be problems.

Jim


